AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Forge Cloudformation Resources
Conditions:
  IsUsEast1:
    Fn::Equals: [!Sub "${AWS::Region}", "us-east-1"]
Mappings:
  FunctionNaming:
    CloudFront:
      FolderRewrite: ForgeCloudFrontRootRewrite
Parameters:
  Version:
    Type: String
  SsmKmsKeyArn:
    Type: String
  PythonLambdaLayerHash:
    Type: String
  PythonLambdaLayerArn:
    Type: String
Resources:
  # 1. S3 Release Cleanup Forge resources and Python layer
  S3ReleaseCleanup:
    Type: Custom::S3Cleanup
    Properties:
      ServiceToken: !GetAtt S3CleanupFunction.Arn
      ActiveOnlyOnStackDeletion: false
      Bucket: !ImportValue ForgeBuckets-ArtifactsBucketName
      Prefix: !Sub ".forgeResources/${Version}"
  S3PythonLambdaLayerCleanup:
    Type: Custom::S3Cleanup
    Properties:
      ServiceToken: !GetAtt S3CleanupFunction.Arn
      ActiveOnlyOnStackDeletion: false
      Bucket: !ImportValue ForgeBuckets-ArtifactsBucketName
      Prefix: !Sub ".forgeResources/pythonLayer/${PythonLambdaLayerHash}"
  # 2. Cloudformation
  AcmCertificateSNSTopic:
    Type: AWS::SNS::Topic
  AcmCertificateTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/SnsStepFunctionTrigger/
      Description: Trigger for AcmCertificate State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref AcmCertificateStateMachine
      Events:
        Trigger:
          Type: SNS
          Properties:
            Topic: !Ref AcmCertificateSNSTopic
      Handler: step_function_trigger.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: states
              Effect: Allow
              Action:
                - "states:startExecution"
              Resource:
                - !Ref AcmCertificateStateMachine
      Runtime: python3.7
      Timeout: 300
  AcmCertificateStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt AcmCertificateFunction.Arn
  AcmCertificateStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
          - |
            {
              "StartAt": "Function",
              "States": {
                "Function": {
                  "Type": "Task",
                  "Resource": "${CertificateFunctionArn}",
                  "Next": "Switch"
                },
                "Switch": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.IsDone",
                      "BooleanEquals": true,
                      "Next": "Finish"
                    },
                    {
                      "Variable": "$.IsDone",
                      "BooleanEquals": false,
                      "Next": "Wait"
                    }
                  ]
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Function"
                },
                "Finish": {
                  "Type": "Succeed"
                }
              }
            }
          - CertificateFunctionArn: !GetAtt AcmCertificateFunction.Arn
      RoleArn: !GetAtt AcmCertificateStateMachineRole.Arn
  AcmCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/AcmCertificate/
      Description: Function to create/update and delete an ACM certificate inside a step functions state machine
      Handler: acm_certificate.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: acm
              Effect: Allow
              Action:
                - "acm:*"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  AcmIssuedCertificateSNSTopic:
    Type: AWS::SNS::Topic
  AcmIssuedCertificateTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/SnsStepFunctionTrigger/
      Description: Trigger for AcmCertificateIssueWaitCondition State Machine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref AcmIssuedCertificateStateMachine
      Events:
        Trigger:
          Type: SNS
          Properties:
            Topic: !Ref AcmIssuedCertificateSNSTopic
      Handler: step_function_trigger.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: states
              Effect: Allow
              Action:
                - "states:startExecution"
              Resource:
                - !Ref AcmIssuedCertificateStateMachine
      Runtime: python3.7
      Timeout: 300
  AcmIssuedCertificateStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt AcmIssuedCertificateFunction.Arn
  AcmIssuedCertificateStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
          - |
            {
              "StartAt": "Function",
              "States": {
                "Function": {
                  "Type": "Task",
                  "Resource": "${ConditionFunctionArn}",
                  "Next": "Switch"
                },
                "Switch": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.IsDone",
                      "BooleanEquals": true,
                      "Next": "Finish"
                    },
                    {
                      "Variable": "$.IsDone",
                      "BooleanEquals": false,
                      "Next": "Wait"
                    }
                  ]
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Function"
                },
                "Finish": {
                  "Type": "Succeed"
                }
              }
            }
          - ConditionFunctionArn: !GetAtt AcmIssuedCertificateFunction.Arn
      RoleArn: !GetAtt AcmIssuedCertificateStateMachineRole.Arn
  AcmIssuedCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/AcmIssuedCertificate/
      Description: Function to check whether an ACM certificate has been issued, inside a step functions state machine
      Handler: acm_issued_certificate.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: acm
              Effect: Allow
              Action:
                - "acm:DescribeCertificate"
                - "acm:GetCertificate"
                - "acm:ListCertificates"
                - "acm:ListTagsForCertificate"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  ApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/ApiKey/
      Description: Cloudformation Custom Resource for apg api keys for Cloudfront.
      Handler: api_key.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Sid: apikey
              Action:
                - "apigateway:*"
              Resource:
                - !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys"
                - !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys/*"
            - Effect: Allow
              Sid: cloudformation
              Action:
                - "cloudformation:DescribeStacks"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  ApiKeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiKeyFunction.Arn
      Principal: cloudformation.amazonaws.com
  CogCondPreAuthSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/CogCondPreAuthSettings/
      Description: Cloudformation Custom Resource for CogCondPreAuthSettings
      Handler: cog_cond_pre_auth_settings.handler
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DeleteParameter"
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:PutParameter"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/CogCondPreAuth/*"
      Runtime: python3.7
      Timeout: 300
  CogCondPreAuthSettingsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CogCondPreAuthSettingsFunction.Arn
      Principal: cloudformation.amazonaws.com
  CognitoUserPoolDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/CognitoUserPoolDomain/
      Description: Cloudformation Custom Resource for Cognito User Pool Domain
      Handler: cognito_user_pool_domain.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:CreateUserPoolDomain"
                - "cognito-idp:DeleteUserPoolDomain"
                - "cloudfront:UpdateDistribution"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  CognitoUserPoolDomainPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoUserPoolDomainFunction.Arn
      Principal: cloudformation.amazonaws.com
  DbInstanceResourceIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/DbInstanceResourceId/
      Description: Cloudformation Custom Resource to retrieve the resource id of a rds database instance
      Handler: db_instance_resource_id.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: rds
              Effect: Allow
              Action:
                - "rds:DescribeDBInstances"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  DbInstanceResourceIdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DbInstanceResourceIdFunction.Arn
      Principal: cloudformation.amazonaws.com
  DnsCertificateSNSTopic:
    Type: AWS::SNS::Topic
  DnsCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/DnsCertificate/
      Description: Cloudformation Custom Resource for SSL Certificates validated via DNS.
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref DnsCertificateWaitStateMachine
      Events:
        Trigger:
          Type: SNS
          Properties:
            Topic: !Ref DnsCertificateSNSTopic
      Handler: dns_certificate.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: acm
              Effect: Allow
              Action:
                - "acm:*"
              Resource:
                - "*"
            - Sid: route53
              Effect: Allow
              Action:
                - "route53:GetHostedZone"
                - "route53:ListHostedZones"
                - "route53:ListHostedZonesByName"
                - "route53:ChangeResourceRecordSets"
                - "route53:GetChange"
              Resource:
                - "*"
            - Sid: states
              Effect: Allow
              Action:
                - "states:startExecution"
              Resource:
                - !Ref DnsCertificateWaitStateMachine
            - Sid: cloudformation
              Effect: Allow
              Action:
                - "cloudformation:DescribeStackResource"
              Resource:
                - "*"
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DeleteParameter"
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:PutParameter"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/DnsCertificateSnsMessageId/*"
      ReservedConcurrentExecutions: 1
      Runtime: python3.7
      Timeout: 300
  DnsCertificateCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/DnsCertificateCheck/
      Description: Function to check a certificate inside a step functions state machine
      Handler: dns_certificate_check.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: acm
              Effect: Allow
              Action:
                - "acm:DescribeCertificate"
                - "acm:GetCertificate"
                - "acm:ListCertificates"
                - "acm:ListTagsForCertificate"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  DnsCertificateWaitStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt DnsCertificateCheckFunction.Arn
  DnsCertificateWaitStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
          - |
            {
              "StartAt": "Check",
              "States": {
                "Check": {
                  "Type": "Task",
                  "Resource": "${CheckArn}",
                  "Next": "Switch"
                },
                "Switch": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.IsCertificateIssued",
                      "BooleanEquals": true,
                      "Next": "Finish"
                    },
                    {
                      "Variable": "$.IsCertificateIssued",
                      "BooleanEquals": false,
                      "Next": "Wait"
                    }
                  ]
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Check"
                },
                "Finish": {
                  "Type": "Succeed"
                }
              }
            }
          - CheckArn: !GetAtt DnsCertificateCheckFunction.Arn
      RoleArn: !GetAtt DnsCertificateWaitStateMachineRole.Arn
  EcrCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/EcrCleanup/
      Description: Cloudformation Custom Resource for ECR Cleaning
      Handler: ecr_cleanup.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "ecr:*"
                - "cloudformation:DescribeStacks"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  EcrCleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EcrCleanupFunction.Arn
      Principal: cloudformation.amazonaws.com
  ForgeResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/ForgeResources/
      Handler: forge_resources.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 512
      Runtime: python3.7
      Timeout: 300
  ForgeResourcesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ForgeResourcesFunction.Arn
      Principal: cloudformation.amazonaws.com
  ForgeResourcesMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Description: A macro to produce a ApiGateway based http redirector
      FunctionName: !GetAtt ForgeResourcesFunction.Arn
      Name: ForgeResources
  ListenerRuleSwapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/ListenerRuleSwapper/
      Description: Cloudformation Custom Resource to swap 2 rules during the update of a stack.
      Handler: listener_rule_swapper.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: elb
              Effect: Allow
              Action:
                - "elasticloadbalancing:DescribeRules"
                - "elasticloadbalancing:ModifyRule"
              Resource:
                - "*"
            - Sid: cloudformation
              Effect: Allow
              Action:
                - "cloudformation:DescribeStackResource"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  ListenerRuleSwapperPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ListenerRuleSwapperFunction.Arn
      Principal: cloudformation.amazonaws.com
  Route53CertificateRecordSetGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/Route53CertificateRecordSetGroup/
      Description: CloudFormation Custom Resource to insert Route53 DNS verification records
      Handler: certificate_record_set_group.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: acm
              Effect: Allow
              Action:
                - "acm:DescribeCertificate"
                - "acm:GetCertificate"
              Resource:
                - "*"
            - Sid: route53
              Effect: Allow
              Action:
                - "route53:GetHostedZone"
                - "route53:ListHostedZones"
                - "route53:ListHostedZonesByName"
                - "route53:ChangeResourceRecordSets"
                - "route53:GetChange"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  Route53CertificateRecordSetGroupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Route53CertificateRecordSetGroupFunction.Arn
      Principal: cloudformation.amazonaws.com
  S3CleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/S3Cleanup/
      Description: Cloudformation Custom Resource for S3 Bucket Cleaning
      Handler: s3_cleanup.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "s3:*"
                - "cloudformation:DescribeStacks"
              Resource:
                - "*"
      Runtime: python3.7
      Timeout: 300
  S3CleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3CleanupFunction.Arn
      Principal: cloudformation.amazonaws.com
  S3ReleaseCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/S3ReleaseCleanup/
      Description: CloudFormation Custom Resource to cleanup releases on S3
      Handler: s3_release_cleanup.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: s3cf
              Effect: Allow
              Action:
                - "s3:*"
                - "cloudformation:DescribeStacks"
              Resource:
                - "*"
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DeleteParameter"
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:PutParameter"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/S3ReleaseCleanup/*"
      Runtime: python3.7
      Timeout: 300
  S3ReleaseCleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3ReleaseCleanupFunction.Arn
      Principal: cloudformation.amazonaws.com
  SequenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/Sequence/
      Description: Cloudformation Custom Resource for Sequences
      Handler: sequence.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DeleteParameter"
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:PutParameter"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/Sequence/*"
      Runtime: python3.7
      Timeout: 300
  SequencePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SequenceFunction.Arn
      Principal: cloudformation.amazonaws.com
  SequenceValueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CloudFormation/SequenceValue/
      Description: Cloudformation Custom Resource for Sequence Values
      Handler: sequence_value.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:PutParameter"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/Sequence/*"
      Runtime: python3.7
      Timeout: 300
  SequenceValuePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SequenceValueFunction.Arn
      Principal: cloudformation.amazonaws.com
  # 3. CodeCommit
  PipelineTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/CodeCommit/PipelineTrigger/
      Runtime: python3.7
      Handler: pipline_trigger.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:GetObjectVersion"
              Resource:
                - Fn::Sub:
                    - "${Bucket}/*"
                    - Bucket: !ImportValue ForgeBuckets-EventsBucketArn
      Environment:
        Variables:
          EVENTS_BUCKET_NAME: !ImportValue ForgeBuckets-EventsBucketName
  PipelineTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PipelineTriggerFunction.Arn
      Principal: codecommit.amazonaws.com
  # 4. Cognito
  CogCondPreAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../codesmith/Cognito/CogCondPreAuth/
      Handler: cog_cond_pre_auth.handler
      Layers:
        - !Ref PythonLambdaLayerArn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: ssm
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParametersByPath"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                - "arn:aws:ssm:*:*:parameter/codesmith-forge/CogCondPreAuth/*"
      Runtime: python3.7
      Timeout: 10
  CogCondPreAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CogCondPreAuthFunction.Arn
      Principal: cognito-idp.amazonaws.com
  # 5. CloudFront
  CloudFrontFolderRewriteRole:
    Type: AWS::IAM::Role
    Condition: IsUsEast1
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  CloudFrontFolderRewriteFunction:
    Type: AWS::Serverless::Function
    Condition: IsUsEast1
    Properties:
      AutoPublishAlias: live
      FunctionName:
        Fn::FindInMap: [FunctionNaming, CloudFront, FolderRewrite]
      CodeUri: ../../codesmith/Cloudfront/FolderRewrite/
      Handler: folder_rewrite.handler
      Role: !GetAtt CloudFrontFolderRewriteRole.Arn
      Runtime: python3.7
      Timeout: 5
Outputs:
  AcmCertificate:
    Value: !Ref AcmCertificateSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-AcmCertificate"
  AcmIssuedCertificate:
    Value: !Ref AcmIssuedCertificateSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-AcmIssuedCertificate"
  CfApiKey:
    Value: !GetAtt ApiKeyFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ApiKey"
  CogCondPreAuth:
    Value: !GetAtt CogCondPreAuthFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CogCondPreAuth"
  CogCondPreAuthSettings:
    Value: !GetAtt CogCondPreAuthSettingsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CogCondPreAuthSettings"
  CognitoUserPoolDomain:
    Value: !GetAtt CognitoUserPoolDomainFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolDomain"
  DbInstanceResourceId:
    Value: !GetAtt DbInstanceResourceIdFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DbInstanceResourceId"
  DnsCertificate:
    Value: !Ref DnsCertificateSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-DnsCertificate"
  EcrCleanup:
    Value: !GetAtt EcrCleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcrCleanup"
  ListenerRuleSwapper:
    Value: !GetAtt ListenerRuleSwapperFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ListenerRuleSwapper"
  Route53CertificateRecordSetGroup:
    Value: !GetAtt Route53CertificateRecordSetGroupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-Route53CertificateRecordSetGroup"
  S3Cleanup:
    Value: !GetAtt S3CleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3Cleanup"
  S3ReleaseCleanup:
    Value: !GetAtt S3ReleaseCleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3ReleaseCleanup"
  Sequence:
    Value: !GetAtt SequenceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-Sequence"
  SequenceValue:
    Value: !GetAtt SequenceValueFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SequenceValue"
  PipelineTrigger:
    Value: !GetAtt PipelineTriggerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PipelineTrigger"
  CloudFrontFolderRewrite:
    Value:
      Fn::Sub:
        - "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${Name}"
        - Name:
            Fn::FindInMap: [FunctionNaming, CloudFront, FolderRewrite]
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontFolderRewrite"
  Version:
    Value: !Ref Version
    Export:
      Name: !Sub "${AWS::StackName}-Version"
  PythonLambdaLayerHash:
    Value: !Ref PythonLambdaLayerHash
    Export:
      Name: !Sub "${AWS::StackName}-PythonLambdaLayerHash"
